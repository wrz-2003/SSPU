{"remainingRequest":"D:\\Work\\WorkSpace\\GitWorkSpace\\TenShop\\resource\\HospitalManager\\src\\HospitalManagerVue\\node_modules\\vue-loader\\lib\\loaders\\templateLoader.js??vue-loader-options!D:\\Work\\WorkSpace\\GitWorkSpace\\TenShop\\resource\\HospitalManager\\src\\HospitalManagerVue\\node_modules\\cache-loader\\dist\\cjs.js??ref--0-0!D:\\Work\\WorkSpace\\GitWorkSpace\\TenShop\\resource\\HospitalManager\\src\\HospitalManagerVue\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!D:\\Work\\WorkSpace\\GitWorkSpace\\TenShop\\resource\\HospitalManager\\src\\HospitalManagerVue\\src\\views\\OrderOperate.vue?vue&type=template&id=6fca86e0&scoped=true&","dependencies":[{"path":"D:\\Work\\WorkSpace\\GitWorkSpace\\TenShop\\resource\\HospitalManager\\src\\HospitalManagerVue\\src\\views\\OrderOperate.vue","mtime":1692452679553},{"path":"D:\\Work\\WorkSpace\\GitWorkSpace\\TenShop\\resource\\HospitalManager\\src\\HospitalManagerVue\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1689001367240},{"path":"D:\\Work\\WorkSpace\\GitWorkSpace\\TenShop\\resource\\HospitalManager\\src\\HospitalManagerVue\\node_modules\\vue-loader\\lib\\loaders\\templateLoader.js","mtime":1689001369726},{"path":"D:\\Work\\WorkSpace\\GitWorkSpace\\TenShop\\resource\\HospitalManager\\src\\HospitalManagerVue\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1689001367240},{"path":"D:\\Work\\WorkSpace\\GitWorkSpace\\TenShop\\resource\\HospitalManager\\src\\HospitalManagerVue\\node_modules\\vue-loader\\lib\\index.js","mtime":1689001369023}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"}]}